// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rbac.proto

package rbac

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetUserMenuReqReq struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
}

func (m *GetUserMenuReqReq) Reset()         { *m = GetUserMenuReqReq{} }
func (m *GetUserMenuReqReq) String() string { return proto.CompactTextString(m) }
func (*GetUserMenuReqReq) ProtoMessage()    {}
func (*GetUserMenuReqReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{0}
}
func (m *GetUserMenuReqReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserMenuReqReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserMenuReqReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserMenuReqReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserMenuReqReq.Merge(m, src)
}
func (m *GetUserMenuReqReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserMenuReqReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserMenuReqReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserMenuReqReq proto.InternalMessageInfo

func (m *GetUserMenuReqReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetUserMenuReqRsp struct {
}

func (m *GetUserMenuReqRsp) Reset()         { *m = GetUserMenuReqRsp{} }
func (m *GetUserMenuReqRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserMenuReqRsp) ProtoMessage()    {}
func (*GetUserMenuReqRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{1}
}
func (m *GetUserMenuReqRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserMenuReqRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserMenuReqRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserMenuReqRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserMenuReqRsp.Merge(m, src)
}
func (m *GetUserMenuReqRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetUserMenuReqRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserMenuReqRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserMenuReqRsp proto.InternalMessageInfo

type CreateRuleReq struct {
	Data []*RuleInfo `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *CreateRuleReq) Reset()         { *m = CreateRuleReq{} }
func (m *CreateRuleReq) String() string { return proto.CompactTextString(m) }
func (*CreateRuleReq) ProtoMessage()    {}
func (*CreateRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{2}
}
func (m *CreateRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRuleReq.Merge(m, src)
}
func (m *CreateRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRuleReq proto.InternalMessageInfo

func (m *CreateRuleReq) GetData() []*RuleInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type RuleInfo struct {
	//规则唯一标识路径 模块/方法
	UrlPath string `protobuf:"bytes,1,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	//规则中文名称 要逻辑化定义，给运营人员使用
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	//类型 1一级菜单 2二级菜单 3三级菜单
	Type int32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	//父级id
	Pid int64 `protobuf:"varint,4,opt,name=Pid,proto3" json:"Pid,omitempty"`
	//排序 菜单使用，大的在前
	Sort int32 `protobuf:"varint,5,opt,name=Sort,proto3" json:"Sort,omitempty"`
	//已选中，为某角色分组的规则。查询分组信息所用
	Selected bool `protobuf:"varint,6,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (m *RuleInfo) Reset()         { *m = RuleInfo{} }
func (m *RuleInfo) String() string { return proto.CompactTextString(m) }
func (*RuleInfo) ProtoMessage()    {}
func (*RuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{3}
}
func (m *RuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleInfo.Merge(m, src)
}
func (m *RuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *RuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RuleInfo proto.InternalMessageInfo

func (m *RuleInfo) GetUrlPath() string {
	if m != nil {
		return m.UrlPath
	}
	return ""
}

func (m *RuleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RuleInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RuleInfo) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *RuleInfo) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *RuleInfo) GetSelected() bool {
	if m != nil {
		return m.Selected
	}
	return false
}

type UpdateRuleReq struct {
	//规则唯一标识路径 模块/方法
	UrlPath string `protobuf:"bytes,1,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	//规则中文名称 要逻辑化定义，给运营人员使用
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	//是否删除 1删除
	IsDelete int32 `protobuf:"varint,3,opt,name=IsDelete,proto3" json:"IsDelete,omitempty"`
	//排序 菜单使用，大的在前
	Sort int32 `protobuf:"varint,4,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (m *UpdateRuleReq) Reset()         { *m = UpdateRuleReq{} }
func (m *UpdateRuleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRuleReq) ProtoMessage()    {}
func (*UpdateRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{4}
}
func (m *UpdateRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRuleReq.Merge(m, src)
}
func (m *UpdateRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRuleReq proto.InternalMessageInfo

func (m *UpdateRuleReq) GetUrlPath() string {
	if m != nil {
		return m.UrlPath
	}
	return ""
}

func (m *UpdateRuleReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateRuleReq) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *UpdateRuleReq) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

type SelectRuleReq struct {
	//类型 1一级菜单 2二级菜单 3三级菜单
	Type int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *SelectRuleReq) Reset()         { *m = SelectRuleReq{} }
func (m *SelectRuleReq) String() string { return proto.CompactTextString(m) }
func (*SelectRuleReq) ProtoMessage()    {}
func (*SelectRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{5}
}
func (m *SelectRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectRuleReq.Merge(m, src)
}
func (m *SelectRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectRuleReq proto.InternalMessageInfo

func (m *SelectRuleReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type SelectRuleRsp struct {
	List []*RuleInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *SelectRuleRsp) Reset()         { *m = SelectRuleRsp{} }
func (m *SelectRuleRsp) String() string { return proto.CompactTextString(m) }
func (*SelectRuleRsp) ProtoMessage()    {}
func (*SelectRuleRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{6}
}
func (m *SelectRuleRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectRuleRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectRuleRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectRuleRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectRuleRsp.Merge(m, src)
}
func (m *SelectRuleRsp) XXX_Size() int {
	return m.Size()
}
func (m *SelectRuleRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectRuleRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectRuleRsp proto.InternalMessageInfo

func (m *SelectRuleRsp) GetList() []*RuleInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type CreateAuthGroupReq struct {
	//分组角色名称
	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	//权限动作ids
	RuleIds []int64 `protobuf:"varint,2,rep,packed,name=RuleIds,proto3" json:"RuleIds,omitempty"`
}

func (m *CreateAuthGroupReq) Reset()         { *m = CreateAuthGroupReq{} }
func (m *CreateAuthGroupReq) String() string { return proto.CompactTextString(m) }
func (*CreateAuthGroupReq) ProtoMessage()    {}
func (*CreateAuthGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{7}
}
func (m *CreateAuthGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAuthGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAuthGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAuthGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAuthGroupReq.Merge(m, src)
}
func (m *CreateAuthGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateAuthGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAuthGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAuthGroupReq proto.InternalMessageInfo

func (m *CreateAuthGroupReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateAuthGroupReq) GetRuleIds() []int64 {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

type UpdateAuthGroupReq struct {
	//分组角色id
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	//分组角色名称
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	//权限动作ids
	RuleIds []int64 `protobuf:"varint,3,rep,packed,name=RuleIds,proto3" json:"RuleIds,omitempty"`
}

func (m *UpdateAuthGroupReq) Reset()         { *m = UpdateAuthGroupReq{} }
func (m *UpdateAuthGroupReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthGroupReq) ProtoMessage()    {}
func (*UpdateAuthGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{8}
}
func (m *UpdateAuthGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAuthGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAuthGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAuthGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthGroupReq.Merge(m, src)
}
func (m *UpdateAuthGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAuthGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthGroupReq proto.InternalMessageInfo

func (m *UpdateAuthGroupReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateAuthGroupReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateAuthGroupReq) GetRuleIds() []int64 {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

type SelectAuthGroupReq struct {
	//分组角色id
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *SelectAuthGroupReq) Reset()         { *m = SelectAuthGroupReq{} }
func (m *SelectAuthGroupReq) String() string { return proto.CompactTextString(m) }
func (*SelectAuthGroupReq) ProtoMessage()    {}
func (*SelectAuthGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{9}
}
func (m *SelectAuthGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAuthGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAuthGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAuthGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAuthGroupReq.Merge(m, src)
}
func (m *SelectAuthGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAuthGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAuthGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAuthGroupReq proto.InternalMessageInfo

func (m *SelectAuthGroupReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SelectAuthGroupRsp struct {
	List []*AuthGroupRuleInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *SelectAuthGroupRsp) Reset()         { *m = SelectAuthGroupRsp{} }
func (m *SelectAuthGroupRsp) String() string { return proto.CompactTextString(m) }
func (*SelectAuthGroupRsp) ProtoMessage()    {}
func (*SelectAuthGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{10}
}
func (m *SelectAuthGroupRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAuthGroupRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAuthGroupRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAuthGroupRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAuthGroupRsp.Merge(m, src)
}
func (m *SelectAuthGroupRsp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAuthGroupRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAuthGroupRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAuthGroupRsp proto.InternalMessageInfo

func (m *SelectAuthGroupRsp) GetList() []*AuthGroupRuleInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type AuthGroupRuleInfo struct {
	//分组角色id
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	//分组角色名称
	GroupTitle string      `protobuf:"bytes,2,opt,name=GroupTitle,proto3" json:"GroupTitle,omitempty"`
	Rules      string      `protobuf:"bytes,3,opt,name=rules,proto3" json:"rules,omitempty"`
	RuleList   []*RuleInfo `protobuf:"bytes,4,rep,name=RuleList,proto3" json:"RuleList,omitempty"`
}

func (m *AuthGroupRuleInfo) Reset()         { *m = AuthGroupRuleInfo{} }
func (m *AuthGroupRuleInfo) String() string { return proto.CompactTextString(m) }
func (*AuthGroupRuleInfo) ProtoMessage()    {}
func (*AuthGroupRuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{11}
}
func (m *AuthGroupRuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthGroupRuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthGroupRuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthGroupRuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthGroupRuleInfo.Merge(m, src)
}
func (m *AuthGroupRuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuthGroupRuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthGroupRuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuthGroupRuleInfo proto.InternalMessageInfo

func (m *AuthGroupRuleInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AuthGroupRuleInfo) GetGroupTitle() string {
	if m != nil {
		return m.GroupTitle
	}
	return ""
}

func (m *AuthGroupRuleInfo) GetRules() string {
	if m != nil {
		return m.Rules
	}
	return ""
}

func (m *AuthGroupRuleInfo) GetRuleList() []*RuleInfo {
	if m != nil {
		return m.RuleList
	}
	return nil
}

type UpdateAuthGroupAccessReq struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	//分组ids
	GroupIds []int64 `protobuf:"varint,2,rep,packed,name=GroupIds,proto3" json:"GroupIds,omitempty"`
}

func (m *UpdateAuthGroupAccessReq) Reset()         { *m = UpdateAuthGroupAccessReq{} }
func (m *UpdateAuthGroupAccessReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthGroupAccessReq) ProtoMessage()    {}
func (*UpdateAuthGroupAccessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{12}
}
func (m *UpdateAuthGroupAccessReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAuthGroupAccessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAuthGroupAccessReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAuthGroupAccessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthGroupAccessReq.Merge(m, src)
}
func (m *UpdateAuthGroupAccessReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAuthGroupAccessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthGroupAccessReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthGroupAccessReq proto.InternalMessageInfo

func (m *UpdateAuthGroupAccessReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateAuthGroupAccessReq) GetGroupIds() []int64 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

type VerifyUserAuthReq struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	//接口请求路径 模块/方法
	UrlPath string `protobuf:"bytes,2,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
}

func (m *VerifyUserAuthReq) Reset()         { *m = VerifyUserAuthReq{} }
func (m *VerifyUserAuthReq) String() string { return proto.CompactTextString(m) }
func (*VerifyUserAuthReq) ProtoMessage()    {}
func (*VerifyUserAuthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{13}
}
func (m *VerifyUserAuthReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyUserAuthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyUserAuthReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyUserAuthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUserAuthReq.Merge(m, src)
}
func (m *VerifyUserAuthReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyUserAuthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUserAuthReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUserAuthReq proto.InternalMessageInfo

func (m *VerifyUserAuthReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *VerifyUserAuthReq) GetUrlPath() string {
	if m != nil {
		return m.UrlPath
	}
	return ""
}

type VerifyUserAuthRsp struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	//接口请求路径 模块/方法
	UrlPath string `protobuf:"bytes,2,opt,name=UrlPath,proto3" json:"UrlPath,omitempty"`
	//验证结果 true通过
	Ok bool `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *VerifyUserAuthRsp) Reset()         { *m = VerifyUserAuthRsp{} }
func (m *VerifyUserAuthRsp) String() string { return proto.CompactTextString(m) }
func (*VerifyUserAuthRsp) ProtoMessage()    {}
func (*VerifyUserAuthRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{14}
}
func (m *VerifyUserAuthRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyUserAuthRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyUserAuthRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyUserAuthRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyUserAuthRsp.Merge(m, src)
}
func (m *VerifyUserAuthRsp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyUserAuthRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyUserAuthRsp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyUserAuthRsp proto.InternalMessageInfo

func (m *VerifyUserAuthRsp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *VerifyUserAuthRsp) GetUrlPath() string {
	if m != nil {
		return m.UrlPath
	}
	return ""
}

func (m *VerifyUserAuthRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type EmptyRsp struct {
}

func (m *EmptyRsp) Reset()         { *m = EmptyRsp{} }
func (m *EmptyRsp) String() string { return proto.CompactTextString(m) }
func (*EmptyRsp) ProtoMessage()    {}
func (*EmptyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{15}
}
func (m *EmptyRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRsp.Merge(m, src)
}
func (m *EmptyRsp) XXX_Size() int {
	return m.Size()
}
func (m *EmptyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetUserMenuReqReq)(nil), "GetUserMenuReqReq")
	proto.RegisterType((*GetUserMenuReqRsp)(nil), "GetUserMenuReqRsp")
	proto.RegisterType((*CreateRuleReq)(nil), "CreateRuleReq")
	proto.RegisterType((*RuleInfo)(nil), "RuleInfo")
	proto.RegisterType((*UpdateRuleReq)(nil), "UpdateRuleReq")
	proto.RegisterType((*SelectRuleReq)(nil), "SelectRuleReq")
	proto.RegisterType((*SelectRuleRsp)(nil), "SelectRuleRsp")
	proto.RegisterType((*CreateAuthGroupReq)(nil), "CreateAuthGroupReq")
	proto.RegisterType((*UpdateAuthGroupReq)(nil), "UpdateAuthGroupReq")
	proto.RegisterType((*SelectAuthGroupReq)(nil), "SelectAuthGroupReq")
	proto.RegisterType((*SelectAuthGroupRsp)(nil), "SelectAuthGroupRsp")
	proto.RegisterType((*AuthGroupRuleInfo)(nil), "AuthGroupRuleInfo")
	proto.RegisterType((*UpdateAuthGroupAccessReq)(nil), "UpdateAuthGroupAccessReq")
	proto.RegisterType((*VerifyUserAuthReq)(nil), "VerifyUserAuthReq")
	proto.RegisterType((*VerifyUserAuthRsp)(nil), "VerifyUserAuthRsp")
	proto.RegisterType((*EmptyRsp)(nil), "EmptyRsp")
}

func init() { proto.RegisterFile("rbac.proto", fileDescriptor_f88ffdd966c9c7ed) }

var fileDescriptor_f88ffdd966c9c7ed = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0xed, 0x00, 0xc9, 0xb9, 0x22, 0xc0, 0xc9, 0xbd, 0x57, 0xae, 0xd5, 0xa6, 0xd1, 0xf4,
	0x47, 0xe9, 0x82, 0x41, 0x02, 0xa9, 0x8b, 0xaa, 0x55, 0x05, 0xa5, 0x42, 0x91, 0x5a, 0x15, 0x0d,
	0xa4, 0xea, 0xa2, 0x8b, 0x3a, 0xc9, 0x00, 0x16, 0x06, 0x1b, 0xcf, 0xa4, 0x88, 0x37, 0xe8, 0xb2,
	0x8f, 0xd1, 0x47, 0xe9, 0x92, 0x65, 0x77, 0xad, 0xc2, 0xbe, 0xcf, 0x50, 0xcd, 0x98, 0xd8, 0x19,
	0x3b, 0xd0, 0xdd, 0xcc, 0x37, 0xe7, 0x7c, 0xe7, 0xf7, 0xb3, 0x01, 0x92, 0xbe, 0x3f, 0xa0, 0x71,
	0x12, 0xc9, 0xc8, 0x7b, 0x7a, 0x18, 0xc8, 0xa3, 0x51, 0x9f, 0x0e, 0xa2, 0x93, 0xb5, 0x93, 0xf3,
	0x40, 0x1e, 0x47, 0xe7, 0x6b, 0x87, 0xd1, 0xaa, 0x7e, 0x5c, 0xfd, 0xec, 0x87, 0xc1, 0xd0, 0x97,
	0x51, 0x22, 0xd6, 0xb2, 0x63, 0xea, 0x47, 0x56, 0x61, 0x65, 0x87, 0xcb, 0x9e, 0xe0, 0xc9, 0x5b,
	0x7e, 0x3a, 0x62, 0xfc, 0x8c, 0xf1, 0x33, 0x74, 0xc1, 0xe9, 0x05, 0x43, 0xd7, 0x6a, 0x5b, 0x1d,
	0x67, 0x6b, 0x7e, 0xfc, 0xf3, 0xbe, 0xbd, 0x5c, 0x61, 0x0a, 0x22, 0xcd, 0x92, 0xb9, 0x88, 0x09,
	0x85, 0xc5, 0x57, 0x09, 0xf7, 0x25, 0x67, 0xa3, 0x90, 0x2b, 0xff, 0x7b, 0x50, 0xdd, 0xf6, 0xa5,
	0xef, 0x5a, 0x6d, 0xa7, 0xf3, 0xcf, 0x7a, 0x9d, 0x2a, 0xbc, 0x7b, 0x7a, 0x10, 0x31, 0x0d, 0x93,
	0x6f, 0x16, 0xd4, 0x26, 0x10, 0xb6, 0x61, 0xa1, 0x97, 0x84, 0xbb, 0xbe, 0x3c, 0xd2, 0xf1, 0xea,
	0x69, 0xbc, 0xb8, 0xc2, 0x26, 0x30, 0xde, 0x85, 0xb9, 0xfd, 0x40, 0x86, 0xdc, 0xb5, 0x8d, 0xf7,
	0x14, 0x44, 0x0f, 0xaa, 0xfb, 0x17, 0x31, 0x77, 0x9d, 0xb6, 0xd5, 0x99, 0xcb, 0x92, 0xd5, 0x18,
	0x2e, 0x83, 0xb3, 0x1b, 0x0c, 0xdd, 0xaa, 0xaa, 0x83, 0xa9, 0x23, 0x22, 0x54, 0xf7, 0xa2, 0x44,
	0xba, 0x73, 0xca, 0x9a, 0xe9, 0x33, 0x7a, 0x50, 0x13, 0x3c, 0xe4, 0x03, 0xc9, 0x87, 0xee, 0x7c,
	0xdb, 0xea, 0xd4, 0x58, 0x76, 0x27, 0xe7, 0xb0, 0xd8, 0x8b, 0x87, 0x53, 0xa5, 0xfd, 0x3d, 0xdd,
	0x7f, 0x8d, 0x74, 0xf3, 0x34, 0x6b, 0x5d, 0xb1, 0xcd, 0x43, 0x2e, 0xaf, 0x53, 0x65, 0xd9, 0x3d,
	0x4b, 0xaa, 0x9a, 0x27, 0x45, 0x1e, 0xc0, 0xe2, 0x9e, 0x4e, 0x62, 0x12, 0x18, 0xaf, 0xeb, 0xb4,
	0x52, 0x23, 0x75, 0x56, 0x8d, 0x9f, 0x32, 0x12, 0xb1, 0x6a, 0x7c, 0x18, 0x08, 0x39, 0xa3, 0xf1,
	0x0a, 0x26, 0xfb, 0x80, 0xe9, 0xa0, 0x36, 0x47, 0xf2, 0x68, 0x27, 0x89, 0x46, 0xb1, 0x62, 0xce,
	0xfa, 0x6b, 0xcd, 0xea, 0x6f, 0x1b, 0x16, 0x34, 0xcb, 0x50, 0xb8, 0x76, 0xdb, 0x99, 0xec, 0xc3,
	0x27, 0x8b, 0x4d, 0x60, 0xf2, 0x11, 0x30, 0xed, 0x91, 0xc1, 0xfa, 0x3f, 0xd8, 0xdd, 0xe2, 0x0a,
	0xd9, 0xdd, 0xe1, 0x0d, 0xed, 0x71, 0xf3, 0x28, 0x8e, 0x8a, 0x92, 0xb3, 0x3f, 0x04, 0x4c, 0x6b,
	0x34, 0xd8, 0x1b, 0x39, 0xbb, 0x62, 0x25, 0xcf, 0xcb, 0x56, 0x22, 0xc6, 0xc7, 0x46, 0x3b, 0x90,
	0xe6, 0x8f, 0x66, 0x5f, 0xbe, 0x58, 0xb0, 0x52, 0x7a, 0xbb, 0xb1, 0x82, 0x16, 0x80, 0x36, 0x9c,
	0x2e, 0x63, 0x0a, 0x51, 0x15, 0x26, 0xa3, 0x90, 0x0b, 0x3d, 0xe7, 0x3a, 0x4b, 0x2f, 0xf8, 0x28,
	0xdd, 0xf9, 0x37, 0x2a, 0x9f, 0x6a, 0x71, 0x3c, 0xd9, 0x13, 0xf9, 0x00, 0x6e, 0xa1, 0x99, 0x9b,
	0x83, 0x01, 0x17, 0xe2, 0x56, 0x59, 0x22, 0x81, 0x9a, 0xb6, 0x2d, 0x4f, 0x29, 0xc3, 0xc9, 0x3b,
	0x58, 0x79, 0xcf, 0x93, 0xe0, 0xe0, 0x42, 0xa9, 0x57, 0xb1, 0xdf, 0x4e, 0x39, 0xb5, 0xe8, 0xf6,
	0xcc, 0x45, 0x9f, 0x41, 0x28, 0x62, 0x25, 0xb9, 0x8c, 0x30, 0x25, 0x72, 0x0b, 0x44, 0xb9, 0x52,
	0x1a, 0x60, 0x47, 0xc7, 0xba, 0x4b, 0x35, 0x66, 0x47, 0xc7, 0x04, 0xa0, 0xf6, 0xfa, 0x24, 0x96,
	0x17, 0x4c, 0xc4, 0xeb, 0xbf, 0x1d, 0xa8, 0xb2, 0xbe, 0x3f, 0xc0, 0x27, 0x00, 0xf9, 0xc7, 0x05,
	0x1b, 0xd4, 0xf8, 0xd2, 0x78, 0x75, 0x3a, 0xf1, 0x20, 0x15, 0x65, 0x9a, 0x8b, 0x15, 0x1b, 0xd4,
	0x50, 0xae, 0x69, 0x4a, 0x01, 0x72, 0xe5, 0x60, 0x83, 0x1a, 0x5a, 0xf3, 0x8c, 0xbb, 0xb6, 0xdf,
	0x80, 0xa5, 0x82, 0x72, 0xb0, 0x49, 0xcb, 0x5a, 0x32, 0x83, 0x6c, 0xc0, 0x52, 0x61, 0x96, 0xd8,
	0xa4, 0x65, 0xa9, 0x98, 0x4e, 0x2f, 0x60, 0xa9, 0xb0, 0xc9, 0xd8, 0xa4, 0x65, 0x05, 0x78, 0x65,
	0x50, 0xbb, 0xbf, 0x84, 0xff, 0x66, 0xee, 0x0f, 0xde, 0xa1, 0x37, 0xed, 0x95, 0x19, 0xff, 0x19,
	0x34, 0xcc, 0xa9, 0x22, 0xd2, 0xd2, 0xde, 0x78, 0x25, 0x6c, 0xe2, 0x6b, 0xfe, 0x1d, 0x10, 0x69,
	0xe9, 0xef, 0xe2, 0x95, 0x30, 0xe5, 0xbb, 0xe5, 0x7e, 0x1f, 0xb7, 0xac, 0xcb, 0x71, 0xcb, 0xfa,
	0x35, 0x6e, 0x59, 0x5f, 0xaf, 0x5a, 0x95, 0xcb, 0xab, 0x56, 0xe5, 0xc7, 0x55, 0xab, 0xd2, 0x9f,
	0xd7, 0x7f, 0xaa, 0x8d, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x99, 0x28, 0x2c, 0xef, 0x06,
	0x00, 0x00,
}

func (m *GetUserMenuReqReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserMenuReqReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserMenuReqReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserMenuReqRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserMenuReqRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserMenuReqRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selected {
		i--
		if m.Selected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Sort != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x28
	}
	if m.Pid != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UrlPath) > 0 {
		i -= len(m.UrlPath)
		copy(dAtA[i:], m.UrlPath)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.UrlPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sort != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x20
	}
	if m.IsDelete != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UrlPath) > 0 {
		i -= len(m.UrlPath)
		copy(dAtA[i:], m.UrlPath)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.UrlPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SelectRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectRuleRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectRuleRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectRuleRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateAuthGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAuthGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAuthGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		dAtA2 := make([]byte, len(m.RuleIds)*10)
		var j1 int
		for _, num1 := range m.RuleIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRbac(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAuthGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAuthGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		dAtA4 := make([]byte, len(m.RuleIds)*10)
		var j3 int
		for _, num1 := range m.RuleIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintRbac(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAuthGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAuthGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAuthGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAuthGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAuthGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAuthGroupRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthGroupRuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthGroupRuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthGroupRuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleList) > 0 {
		for iNdEx := len(m.RuleList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RuleList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Rules) > 0 {
		i -= len(m.Rules)
		copy(dAtA[i:], m.Rules)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.Rules)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupTitle) > 0 {
		i -= len(m.GroupTitle)
		copy(dAtA[i:], m.GroupTitle)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.GroupTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAuthGroupAccessReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthGroupAccessReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAuthGroupAccessReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		dAtA6 := make([]byte, len(m.GroupIds)*10)
		var j5 int
		for _, num1 := range m.GroupIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintRbac(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerifyUserAuthReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyUserAuthReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyUserAuthReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UrlPath) > 0 {
		i -= len(m.UrlPath)
		copy(dAtA[i:], m.UrlPath)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.UrlPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerifyUserAuthRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyUserAuthRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyUserAuthRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.UrlPath) > 0 {
		i -= len(m.UrlPath)
		copy(dAtA[i:], m.UrlPath)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.UrlPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EmptyRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRbac(dAtA []byte, offset int, v uint64) int {
	offset -= sovRbac(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetUserMenuReqReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRbac(uint64(m.Uid))
	}
	return n
}

func (m *GetUserMenuReqRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *RuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UrlPath)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRbac(uint64(m.Type))
	}
	if m.Pid != 0 {
		n += 1 + sovRbac(uint64(m.Pid))
	}
	if m.Sort != 0 {
		n += 1 + sovRbac(uint64(m.Sort))
	}
	if m.Selected {
		n += 2
	}
	return n
}

func (m *UpdateRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UrlPath)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.IsDelete != 0 {
		n += 1 + sovRbac(uint64(m.IsDelete))
	}
	if m.Sort != 0 {
		n += 1 + sovRbac(uint64(m.Sort))
	}
	return n
}

func (m *SelectRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRbac(uint64(m.Type))
	}
	return n
}

func (m *SelectRuleRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *CreateAuthGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if len(m.RuleIds) > 0 {
		l = 0
		for _, e := range m.RuleIds {
			l += sovRbac(uint64(e))
		}
		n += 1 + sovRbac(uint64(l)) + l
	}
	return n
}

func (m *UpdateAuthGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRbac(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if len(m.RuleIds) > 0 {
		l = 0
		for _, e := range m.RuleIds {
			l += sovRbac(uint64(e))
		}
		n += 1 + sovRbac(uint64(l)) + l
	}
	return n
}

func (m *SelectAuthGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRbac(uint64(m.Id))
	}
	return n
}

func (m *SelectAuthGroupRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *AuthGroupRuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRbac(uint64(m.Id))
	}
	l = len(m.GroupTitle)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	l = len(m.Rules)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if len(m.RuleList) > 0 {
		for _, e := range m.RuleList {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *UpdateAuthGroupAccessReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRbac(uint64(m.Uid))
	}
	if len(m.GroupIds) > 0 {
		l = 0
		for _, e := range m.GroupIds {
			l += sovRbac(uint64(e))
		}
		n += 1 + sovRbac(uint64(l)) + l
	}
	return n
}

func (m *VerifyUserAuthReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRbac(uint64(m.Uid))
	}
	l = len(m.UrlPath)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}

func (m *VerifyUserAuthRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRbac(uint64(m.Uid))
	}
	l = len(m.UrlPath)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.Ok {
		n += 2
	}
	return n
}

func (m *EmptyRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRbac(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRbac(x uint64) (n int) {
	return sovRbac(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetUserMenuReqReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserMenuReqReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserMenuReqReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserMenuReqRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserMenuReqRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserMenuReqRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RuleInfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Selected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectRuleRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectRuleRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectRuleRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RuleInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAuthGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAuthGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAuthGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RuleIds = append(m.RuleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRbac
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRbac
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RuleIds) == 0 {
					m.RuleIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RuleIds = append(m.RuleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RuleIds = append(m.RuleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRbac
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRbac
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RuleIds) == 0 {
					m.RuleIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RuleIds = append(m.RuleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAuthGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAuthGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAuthGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAuthGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAuthGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAuthGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AuthGroupRuleInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthGroupRuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthGroupRuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthGroupRuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleList = append(m.RuleList, &RuleInfo{})
			if err := m.RuleList[len(m.RuleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthGroupAccessReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthGroupAccessReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthGroupAccessReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIds = append(m.GroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRbac
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRbac
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GroupIds) == 0 {
					m.GroupIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIds = append(m.GroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyUserAuthReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyUserAuthReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyUserAuthReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyUserAuthRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyUserAuthRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyUserAuthRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRbac(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRbac
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRbac
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRbac
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRbac        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRbac          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRbac = fmt.Errorf("proto: unexpected end of group")
)
